Problem -> Edit Distance 
Logic -> just apply recusrion for fast answer, but it gives you TLE in recusrion we have to find base case and then just find those three methods ans, see and check the 1st cahr if equal then do something if not then 3 cases 
In memo same work just save in storage 2d array

Code ->    //Memoization Code
     public int minDistance(String word1, String word2) {
         int m = word1.length();
         int n = word2.length();
         int storage[][] = new int[m+1][n+1];
         for(int i=0;i<=m;i++){
             for(int j=0;j<=n;j++){
             storage[i][j] = -1;
             }
         }
         
         return editMemo(word1,word2,storage);
     }
    
    public int editMemo(String word1, String word2, int storage[][]){
        int m = word1.length();
         int n = word2.length();
        if(storage[m][n] != -1){
            return storage[m][n];
        }
        if(m==0) return storage[m][n] = n;
        if(n==0) return storage[m][n] = m;
         if(word1.charAt(0) == word2.charAt(0)){
            return storage[m][n] = editMemo(word1.substring(1),word2.substring(1),storage);
         }else{
               //insert
            int insert = editMemo(word1,word2.substring(1),storage);
             //delete
            int delete = editMemo(word1.substring(1),word2,storage);
             //replace 
            int replace = editMemo(word1.substring(1),word2.substring(1),storage);
              storage[m][n] = 1 + Math.min(insert,Math.min(delete,replace));
         }
        return storage[m][n];
    }
    
It gives us TLE, because strings present in test cases can be so long

// Recursion Solution
 public int minDistance(String word1, String word2) {
      if(word1.length() == 0){
          return word2.length();
      }
      if(word2.length() == 0){
          return word1.length();
      }
     
      if(word1.charAt(0) == word2.charAt(0)){
          return minDistance(word1.substring(1),word2.substring(1));
     }else{
          //insert
          int insert = minDistance(word1,word2.substring(1));
           //delete
          int delete = minDistance(word1.substring(1),word2);
           //replace 
          int replace = minDistance(word1.substring(1),word2.substring(1));
            return 1 + Math.min(insert,Math.min(delete,replace));
      }
  }
